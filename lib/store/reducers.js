"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducers = reducers;

var _table = require("../model/table.query");

var _order = require("../model/order.query");

var _drink = require("../model/drink.query");

var _commands = require("./commands");

function openTable(state, {
  tableNumber
}) {
  return {
    tables: [...state.tables, new _table.Table(tableNumber)]
  };
}

function closeTable(state, {
  tableNumber
}) {
  return {
    tables: state.tables.filter(table => table.number !== tableNumber)
  };
}

function placeOrder(state, {
  tableNumber,
  drinkDtos
}) {
  const newTable = Object.assign(new _table.Table(), state.tables.find(table => table.number === tableNumber));
  const newOrder = new _order.Order();
  drinkDtos.forEach(drinkDto => {
    newOrder.addDrink(new _drink.Drink(drinkDto.name));
  });
  newTable.order = newOrder;
  return {
    tables: state.tables.map(table => {
      if (table.number === tableNumber) {
        return newTable;
      }

      return table;
    })
  };
}

function amendOrder(state, {
  tableNumber,
  drinkDtos
}) {
  const newTable = Object.assign(new _table.Table(), state.tables.find(table => table.number === tableNumber));
  const newOrder = Object.assign(new _order.Order(), newTable.order);
  drinkDtos.forEach(drinkDto => {
    newOrder.replaceDrink(new _drink.Drink(drinkDto.name), drinkDto.id);
  });
  newTable.order = newOrder;
  return {
    tables: state.tables.map(table => {
      if (table.number === tableNumber) {
        return newTable;
      }

      return table;
    })
  };
}

function markDrinksServed(state, {
  tableNumber,
  drinkDtos
}) {
  const newTable = Object.assign(new _table.Table(), state.tables.find(table => table.number === tableNumber));
  const newOrder = Object.assign(new _order.Order(), newTable.order);
  drinkDtos.forEach(drinkDto => {
    newOrder.markDrinkServed(drinkDto.id);
  });
  newTable.order = newOrder;
  return {
    tables: state.tables.map(table => {
      if (table.number === tableNumber) {
        return newTable;
      }

      return table;
    })
  };
}

function reducers(state = {
  tables: []
}, action) {
  if (!action) {
    return state;
  }

  switch (action.type) {
    case _commands.COMMANDS.OPEN_TABLE:
      return openTable(state, action.payload);

    case _commands.COMMANDS.PLACE_ORDER:
      return placeOrder(state, action.payload);

    case _commands.COMMANDS.AMEND_ORDER:
      return amendOrder(state, action.payload);

    case _commands.COMMANDS.MARK_DRINKS_SERVED:
      return markDrinksServed(state, action.payload);

    case _commands.COMMANDS.CLOSE_TABLE:
      return closeTable(state, action.payload);

    default:
      return state;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,