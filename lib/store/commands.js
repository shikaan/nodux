"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.closeTable = exports.markDrinksServed = exports.amendOrder = exports.placeOrder = exports.openTable = exports.COMMANDS = void 0;
const COMMANDS = {
  OPEN_TABLE: 'OPEN_TABLE',
  PLACE_ORDER: 'PLACE_ORDER',
  AMEND_ORDER: 'AMEND_ORDER',
  MARK_DRINKS_SERVED: 'MARK_DRINKS_SERVED',
  CLOSE_TABLE: 'CLOSE_TABLE'
  /**
   * @param {Number} tableNumber 
   */

};
exports.COMMANDS = COMMANDS;

const openTable = ({
  tableNumber
}) => {
  return {
    type: COMMANDS.OPEN_TABLE,
    payload: {
      tableNumber
    }
  };
};
/**
 * @param {Number} tableNumber 
 * @param {Array<DrinkDto>} drinks 
 */


exports.openTable = openTable;

const placeOrder = ({
  tableNumber,
  drinkDtos
}) => {
  return {
    type: COMMANDS.PLACE_ORDER,
    payload: {
      tableNumber,
      drinkDtos
    }
  };
};
/**
 * @param {Number} tableNumber 
 * @param {Array<DrinkDto>} drinks 
 */


exports.placeOrder = placeOrder;

const amendOrder = ({
  tableNumber,
  drinkDtos
}) => {
  return dispatch => {
    // if (canBeAmended(orderNumber)) {
    dispatch({
      type: COMMANDS.AMEND_ORDER,
      payload: {
        tableNumber,
        drinkDtos
      }
    }); // }
    // Handle CannotCancelServedItem (should change the state)
  };
};
/**
 * @param {Number} tableNumber 
 * @param {Array<DrinkDto>} drinks 
 */


exports.amendOrder = amendOrder;

const markDrinksServed = ({
  tableNumber,
  drinkDtos
}) => {
  return dispatch => {
    // if (isNotServed(drinkDtos)) {
    dispatch({
      type: COMMANDS.MARK_DRINKS_SERVED,
      payload: {
        tableNumber,
        drinkDtos
      }
    }); // }
  };
};
/**
 * @param {Number} tableNumber 
 */


exports.markDrinksServed = markDrinksServed;

const closeTable = ({
  tableNumber
}) => {
  return {
    type: COMMANDS.CLOSE_TABLE,
    payload: {
      tableNumber
    }
  };
};

exports.closeTable = closeTable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdG9yZS9jb21tYW5kcy5qcyJdLCJuYW1lcyI6WyJDT01NQU5EUyIsIk9QRU5fVEFCTEUiLCJQTEFDRV9PUkRFUiIsIkFNRU5EX09SREVSIiwiTUFSS19EUklOS1NfU0VSVkVEIiwiQ0xPU0VfVEFCTEUiLCJvcGVuVGFibGUiLCJ0YWJsZU51bWJlciIsInR5cGUiLCJwYXlsb2FkIiwicGxhY2VPcmRlciIsImRyaW5rRHRvcyIsImFtZW5kT3JkZXIiLCJkaXNwYXRjaCIsIm1hcmtEcmlua3NTZXJ2ZWQiLCJjbG9zZVRhYmxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxNQUFNQSxRQUFRLEdBQUc7QUFDcEJDLEVBQUFBLFVBQVUsRUFBRSxZQURRO0FBRXBCQyxFQUFBQSxXQUFXLEVBQUUsYUFGTztBQUdwQkMsRUFBQUEsV0FBVyxFQUFFLGFBSE87QUFJcEJDLEVBQUFBLGtCQUFrQixFQUFFLG9CQUpBO0FBS3BCQyxFQUFBQSxXQUFXLEVBQUU7QUFHakI7Ozs7QUFSd0IsQ0FBakI7OztBQVdBLE1BQU1DLFNBQVMsR0FBRyxDQUFDO0FBQUVDLEVBQUFBO0FBQUYsQ0FBRCxLQUFxQjtBQUMxQyxTQUFPO0FBQ0hDLElBQUFBLElBQUksRUFBRVIsUUFBUSxDQUFDQyxVQURaO0FBRUhRLElBQUFBLE9BQU8sRUFBRTtBQUFFRixNQUFBQTtBQUFGO0FBRk4sR0FBUDtBQUlILENBTE07QUFPUDs7Ozs7Ozs7QUFJTyxNQUFNRyxVQUFVLEdBQUcsQ0FBQztBQUFFSCxFQUFBQSxXQUFGO0FBQWVJLEVBQUFBO0FBQWYsQ0FBRCxLQUFnQztBQUN0RCxTQUFPO0FBQ0hILElBQUFBLElBQUksRUFBRVIsUUFBUSxDQUFDRSxXQURaO0FBRUhPLElBQUFBLE9BQU8sRUFBRTtBQUFFRixNQUFBQSxXQUFGO0FBQWVJLE1BQUFBO0FBQWY7QUFGTixHQUFQO0FBSUgsQ0FMTTtBQU9QOzs7Ozs7OztBQUlPLE1BQU1DLFVBQVUsR0FBRyxDQUFDO0FBQUVMLEVBQUFBLFdBQUY7QUFBZUksRUFBQUE7QUFBZixDQUFELEtBQWdDO0FBQ3RELFNBQU9FLFFBQVEsSUFBSTtBQUVmO0FBQ0lBLElBQUFBLFFBQVEsQ0FBQztBQUNMTCxNQUFBQSxJQUFJLEVBQUVSLFFBQVEsQ0FBQ0csV0FEVjtBQUVMTSxNQUFBQSxPQUFPLEVBQUU7QUFBRUYsUUFBQUEsV0FBRjtBQUFlSSxRQUFBQTtBQUFmO0FBRkosS0FBRCxDQUFSLENBSFcsQ0FPZjtBQUVBO0FBQ0gsR0FWRDtBQVdILENBWk07QUFjUDs7Ozs7Ozs7QUFJTyxNQUFNRyxnQkFBZ0IsR0FBRyxDQUFDO0FBQUVQLEVBQUFBLFdBQUY7QUFBZUksRUFBQUE7QUFBZixDQUFELEtBQWdDO0FBQzVELFNBQU9FLFFBQVEsSUFBSTtBQUNmO0FBQ0lBLElBQUFBLFFBQVEsQ0FBQztBQUNMTCxNQUFBQSxJQUFJLEVBQUVSLFFBQVEsQ0FBQ0ksa0JBRFY7QUFFTEssTUFBQUEsT0FBTyxFQUFFO0FBQUVGLFFBQUFBLFdBQUY7QUFBZUksUUFBQUE7QUFBZjtBQUZKLEtBQUQsQ0FBUixDQUZXLENBTWY7QUFDSCxHQVBEO0FBUUgsQ0FUTTtBQVdQOzs7Ozs7O0FBR08sTUFBTUksVUFBVSxHQUFHLENBQUM7QUFBRVIsRUFBQUE7QUFBRixDQUFELEtBQXFCO0FBQzNDLFNBQU87QUFDSEMsSUFBQUEsSUFBSSxFQUFFUixRQUFRLENBQUNLLFdBRFo7QUFFSEksSUFBQUEsT0FBTyxFQUFFO0FBQUVGLE1BQUFBO0FBQUY7QUFGTixHQUFQO0FBSUgsQ0FMTSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBDT01NQU5EUyA9IHtcclxuICAgIE9QRU5fVEFCTEU6ICdPUEVOX1RBQkxFJyxcclxuICAgIFBMQUNFX09SREVSOiAnUExBQ0VfT1JERVInLFxyXG4gICAgQU1FTkRfT1JERVI6ICdBTUVORF9PUkRFUicsXHJcbiAgICBNQVJLX0RSSU5LU19TRVJWRUQ6ICdNQVJLX0RSSU5LU19TRVJWRUQnLFxyXG4gICAgQ0xPU0VfVEFCTEU6ICdDTE9TRV9UQUJMRSdcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0YWJsZU51bWJlciBcclxuICovXHJcbmV4cG9ydCBjb25zdCBvcGVuVGFibGUgPSAoeyB0YWJsZU51bWJlciB9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IENPTU1BTkRTLk9QRU5fVEFCTEUsXHJcbiAgICAgICAgcGF5bG9hZDogeyB0YWJsZU51bWJlciB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gdGFibGVOdW1iZXIgXHJcbiAqIEBwYXJhbSB7QXJyYXk8RHJpbmtEdG8+fSBkcmlua3MgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcGxhY2VPcmRlciA9ICh7IHRhYmxlTnVtYmVyLCBkcmlua0R0b3MgfSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBDT01NQU5EUy5QTEFDRV9PUkRFUixcclxuICAgICAgICBwYXlsb2FkOiB7IHRhYmxlTnVtYmVyLCBkcmlua0R0b3MgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtOdW1iZXJ9IHRhYmxlTnVtYmVyIFxyXG4gKiBAcGFyYW0ge0FycmF5PERyaW5rRHRvPn0gZHJpbmtzIFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGFtZW5kT3JkZXIgPSAoeyB0YWJsZU51bWJlciwgZHJpbmtEdG9zIH0pID0+IHtcclxuICAgIHJldHVybiBkaXNwYXRjaCA9PiB7XHJcblxyXG4gICAgICAgIC8vIGlmIChjYW5CZUFtZW5kZWQob3JkZXJOdW1iZXIpKSB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IENPTU1BTkRTLkFNRU5EX09SREVSLFxyXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogeyB0YWJsZU51bWJlciwgZHJpbmtEdG9zIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBDYW5ub3RDYW5jZWxTZXJ2ZWRJdGVtIChzaG91bGQgY2hhbmdlIHRoZSBzdGF0ZSlcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0YWJsZU51bWJlciBcclxuICogQHBhcmFtIHtBcnJheTxEcmlua0R0bz59IGRyaW5rcyBcclxuICovXHJcbmV4cG9ydCBjb25zdCBtYXJrRHJpbmtzU2VydmVkID0gKHsgdGFibGVOdW1iZXIsIGRyaW5rRHRvcyB9KSA9PiB7XHJcbiAgICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xyXG4gICAgICAgIC8vIGlmIChpc05vdFNlcnZlZChkcmlua0R0b3MpKSB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IENPTU1BTkRTLk1BUktfRFJJTktTX1NFUlZFRCxcclxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsgdGFibGVOdW1iZXIsIGRyaW5rRHRvcyB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtOdW1iZXJ9IHRhYmxlTnVtYmVyIFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNsb3NlVGFibGUgPSAoeyB0YWJsZU51bWJlciB9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IENPTU1BTkRTLkNMT1NFX1RBQkxFLFxyXG4gICAgICAgIHBheWxvYWQ6IHsgdGFibGVOdW1iZXIgfVxyXG4gICAgfVxyXG59Il19