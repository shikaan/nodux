"use strict";

var _store = require("./store");

var _logger = _interopRequireDefault(require("./logger"));

var _drink = require("./model/drink.command");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// const server = require('express')()
const PORT = 1234; // server.post('/tables', (req, res, next) => {
//     app.dispatch()
// })
// server.listen(PORT, () => {
//     console.log(`App listening on ${PORT}`)
// })

_logger.default.info('Opening table 1');

_store.app.dispatchCommand((0, _store.openTable)({
  tableNumber: 1
}));

_logger.default.info('Retrieving table...');

_logger.default.debug(_store.app.dispatchQuery((0, _store.getTable)({
  number: 1
})));

_logger.default.info('Placing order table 1');

_store.app.dispatchCommand((0, _store.placeOrder)({
  tableNumber: 1,
  drinkDtos: [new _drink.DrinkDto({
    name: 'Beer'
  }), new _drink.DrinkDto({
    name: 'Beer'
  }), new _drink.DrinkDto({
    name: 'Whiskey'
  })]
}));

_logger.default.info('Retrieving order...');

let order = _store.app.dispatchQuery((0, _store.getOrder)({
  tableNumber: 1
}));

_logger.default.debug(order);

_logger.default.info('Amend order table 1: first item is Lemonade');

_store.app.dispatchCommand((0, _store.amendOrder)({
  tableNumber: 1,
  drinkDtos: [new _drink.DrinkDto({
    name: 'Lemonade',
    id: order.drinks[0].id
  })]
}));

_logger.default.info('Retrieving order...');

order = _store.app.dispatchQuery((0, _store.getOrder)({
  tableNumber: 1
}));

_logger.default.debug(order);

_logger.default.info('Mark first two drinks as served');

_store.app.dispatchCommand((0, _store.markDrinksServed)({
  tableNumber: 1,
  drinkDtos: [new _drink.DrinkDto({
    id: order.drinks[0].id
  }), new _drink.DrinkDto({
    id: order.drinks[1].id
  })]
}));

_logger.default.info('Retrieving order...');

order = _store.app.dispatchQuery((0, _store.getOrder)({
  tableNumber: 1
}));

_logger.default.debug(order);

_logger.default.info('Close table');

_store.app.dispatchCommand((0, _store.closeTable)({
  tableNumber: 1
}));

_logger.default.debug('State dump', _store.app.dispatchQuery(_store.getState));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJQT1JUIiwibG9nIiwiaW5mbyIsImFwcCIsImRpc3BhdGNoQ29tbWFuZCIsInRhYmxlTnVtYmVyIiwiZGVidWciLCJkaXNwYXRjaFF1ZXJ5IiwibnVtYmVyIiwiZHJpbmtEdG9zIiwiRHJpbmtEdG8iLCJuYW1lIiwib3JkZXIiLCJpZCIsImRyaW5rcyIsImdldFN0YXRlIl0sIm1hcHBpbmdzIjoiOztBQUVBOztBQUNBOztBQUNBOzs7O0FBSkE7QUFNQSxNQUFNQSxJQUFJLEdBQUcsSUFBYixDLENBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOztBQUVBQyxnQkFBSUMsSUFBSixDQUFTLGlCQUFUOztBQUNBQyxXQUFJQyxlQUFKLENBQW9CLHNCQUFVO0FBQUVDLEVBQUFBLFdBQVcsRUFBRTtBQUFmLENBQVYsQ0FBcEI7O0FBQ0FKLGdCQUFJQyxJQUFKLENBQVMscUJBQVQ7O0FBQ0FELGdCQUFJSyxLQUFKLENBQVVILFdBQUlJLGFBQUosQ0FBa0IscUJBQVM7QUFBRUMsRUFBQUEsTUFBTSxFQUFFO0FBQVYsQ0FBVCxDQUFsQixDQUFWOztBQUVBUCxnQkFBSUMsSUFBSixDQUFTLHVCQUFUOztBQUNBQyxXQUFJQyxlQUFKLENBQ0ksdUJBQVc7QUFDUEMsRUFBQUEsV0FBVyxFQUFFLENBRE47QUFFUEksRUFBQUEsU0FBUyxFQUFFLENBQ1AsSUFBSUMsZUFBSixDQUFhO0FBQUVDLElBQUFBLElBQUksRUFBRTtBQUFSLEdBQWIsQ0FETyxFQUVQLElBQUlELGVBQUosQ0FBYTtBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBUixHQUFiLENBRk8sRUFHUCxJQUFJRCxlQUFKLENBQWE7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQVIsR0FBYixDQUhPO0FBRkosQ0FBWCxDQURKOztBQVVBVixnQkFBSUMsSUFBSixDQUFTLHFCQUFUOztBQUNBLElBQUlVLEtBQUssR0FBR1QsV0FBSUksYUFBSixDQUFrQixxQkFBUztBQUFFRixFQUFBQSxXQUFXLEVBQUU7QUFBZixDQUFULENBQWxCLENBQVo7O0FBQ0FKLGdCQUFJSyxLQUFKLENBQVVNLEtBQVY7O0FBRUFYLGdCQUFJQyxJQUFKLENBQVMsNkNBQVQ7O0FBQ0FDLFdBQUlDLGVBQUosQ0FDSSx1QkFBVztBQUNQQyxFQUFBQSxXQUFXLEVBQUUsQ0FETjtBQUVQSSxFQUFBQSxTQUFTLEVBQUUsQ0FDUCxJQUFJQyxlQUFKLENBQWE7QUFBRUMsSUFBQUEsSUFBSSxFQUFFLFVBQVI7QUFBb0JFLElBQUFBLEVBQUUsRUFBRUQsS0FBSyxDQUFDRSxNQUFOLENBQWEsQ0FBYixFQUFnQkQ7QUFBeEMsR0FBYixDQURPO0FBRkosQ0FBWCxDQURKOztBQVFBWixnQkFBSUMsSUFBSixDQUFTLHFCQUFUOztBQUNBVSxLQUFLLEdBQUdULFdBQUlJLGFBQUosQ0FBa0IscUJBQVM7QUFBRUYsRUFBQUEsV0FBVyxFQUFFO0FBQWYsQ0FBVCxDQUFsQixDQUFSOztBQUNBSixnQkFBSUssS0FBSixDQUFVTSxLQUFWOztBQUVBWCxnQkFBSUMsSUFBSixDQUFTLGlDQUFUOztBQUNBQyxXQUFJQyxlQUFKLENBQ0ksNkJBQWlCO0FBQ2JDLEVBQUFBLFdBQVcsRUFBRSxDQURBO0FBRWJJLEVBQUFBLFNBQVMsRUFBRSxDQUNQLElBQUlDLGVBQUosQ0FBYTtBQUFFRyxJQUFBQSxFQUFFLEVBQUVELEtBQUssQ0FBQ0UsTUFBTixDQUFhLENBQWIsRUFBZ0JEO0FBQXRCLEdBQWIsQ0FETyxFQUVQLElBQUlILGVBQUosQ0FBYTtBQUFFRyxJQUFBQSxFQUFFLEVBQUVELEtBQUssQ0FBQ0UsTUFBTixDQUFhLENBQWIsRUFBZ0JEO0FBQXRCLEdBQWIsQ0FGTztBQUZFLENBQWpCLENBREo7O0FBU0FaLGdCQUFJQyxJQUFKLENBQVMscUJBQVQ7O0FBQ0FVLEtBQUssR0FBR1QsV0FBSUksYUFBSixDQUFrQixxQkFBUztBQUFFRixFQUFBQSxXQUFXLEVBQUU7QUFBZixDQUFULENBQWxCLENBQVI7O0FBQ0FKLGdCQUFJSyxLQUFKLENBQVVNLEtBQVY7O0FBRUFYLGdCQUFJQyxJQUFKLENBQVMsYUFBVDs7QUFDQUMsV0FBSUMsZUFBSixDQUFvQix1QkFBVztBQUFDQyxFQUFBQSxXQUFXLEVBQUU7QUFBZCxDQUFYLENBQXBCOztBQUVBSixnQkFBSUssS0FBSixDQUFVLFlBQVYsRUFBd0JILFdBQUlJLGFBQUosQ0FBa0JRLGVBQWxCLENBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uc3Qgc2VydmVyID0gcmVxdWlyZSgnZXhwcmVzcycpKClcclxuXHJcbmltcG9ydCB7IGFwcCwgb3BlblRhYmxlLCBwbGFjZU9yZGVyLCBnZXRUYWJsZSwgZ2V0T3JkZXIsIGdldFN0YXRlLCBhbWVuZE9yZGVyLCBtYXJrRHJpbmtzU2VydmVkLCBjbG9zZVRhYmxlIH0gZnJvbSAnLi9zdG9yZSdcclxuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcidcclxuaW1wb3J0IHsgRHJpbmtEdG8gfSBmcm9tICcuL21vZGVsL2RyaW5rLmNvbW1hbmQnO1xyXG5cclxuY29uc3QgUE9SVCA9IDEyMzRcclxuXHJcbi8vIHNlcnZlci5wb3N0KCcvdGFibGVzJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbi8vICAgICBhcHAuZGlzcGF0Y2goKVxyXG4vLyB9KVxyXG5cclxuLy8gc2VydmVyLmxpc3RlbihQT1JULCAoKSA9PiB7XHJcbi8vICAgICBjb25zb2xlLmxvZyhgQXBwIGxpc3RlbmluZyBvbiAke1BPUlR9YClcclxuLy8gfSlcclxuXHJcbmxvZy5pbmZvKCdPcGVuaW5nIHRhYmxlIDEnKVxyXG5hcHAuZGlzcGF0Y2hDb21tYW5kKG9wZW5UYWJsZSh7IHRhYmxlTnVtYmVyOiAxIH0pKVxyXG5sb2cuaW5mbygnUmV0cmlldmluZyB0YWJsZS4uLicpXHJcbmxvZy5kZWJ1ZyhhcHAuZGlzcGF0Y2hRdWVyeShnZXRUYWJsZSh7IG51bWJlcjogMSB9KSkpXHJcblxyXG5sb2cuaW5mbygnUGxhY2luZyBvcmRlciB0YWJsZSAxJylcclxuYXBwLmRpc3BhdGNoQ29tbWFuZChcclxuICAgIHBsYWNlT3JkZXIoe1xyXG4gICAgICAgIHRhYmxlTnVtYmVyOiAxLFxyXG4gICAgICAgIGRyaW5rRHRvczogW1xyXG4gICAgICAgICAgICBuZXcgRHJpbmtEdG8oeyBuYW1lOiAnQmVlcicgfSksXHJcbiAgICAgICAgICAgIG5ldyBEcmlua0R0byh7IG5hbWU6ICdCZWVyJyB9KSxcclxuICAgICAgICAgICAgbmV3IERyaW5rRHRvKHsgbmFtZTogJ1doaXNrZXknIH0pXHJcbiAgICAgICAgXVxyXG4gICAgfSlcclxuKVxyXG5sb2cuaW5mbygnUmV0cmlldmluZyBvcmRlci4uLicpXHJcbmxldCBvcmRlciA9IGFwcC5kaXNwYXRjaFF1ZXJ5KGdldE9yZGVyKHsgdGFibGVOdW1iZXI6IDEgfSkpXHJcbmxvZy5kZWJ1ZyhvcmRlcilcclxuXHJcbmxvZy5pbmZvKCdBbWVuZCBvcmRlciB0YWJsZSAxOiBmaXJzdCBpdGVtIGlzIExlbW9uYWRlJylcclxuYXBwLmRpc3BhdGNoQ29tbWFuZChcclxuICAgIGFtZW5kT3JkZXIoe1xyXG4gICAgICAgIHRhYmxlTnVtYmVyOiAxLFxyXG4gICAgICAgIGRyaW5rRHRvczogW1xyXG4gICAgICAgICAgICBuZXcgRHJpbmtEdG8oeyBuYW1lOiAnTGVtb25hZGUnLCBpZDogb3JkZXIuZHJpbmtzWzBdLmlkIH0pXHJcbiAgICAgICAgXVxyXG4gICAgfSlcclxuKVxyXG5sb2cuaW5mbygnUmV0cmlldmluZyBvcmRlci4uLicpXHJcbm9yZGVyID0gYXBwLmRpc3BhdGNoUXVlcnkoZ2V0T3JkZXIoeyB0YWJsZU51bWJlcjogMSB9KSlcclxubG9nLmRlYnVnKG9yZGVyKVxyXG5cclxubG9nLmluZm8oJ01hcmsgZmlyc3QgdHdvIGRyaW5rcyBhcyBzZXJ2ZWQnKVxyXG5hcHAuZGlzcGF0Y2hDb21tYW5kKFxyXG4gICAgbWFya0RyaW5rc1NlcnZlZCh7XHJcbiAgICAgICAgdGFibGVOdW1iZXI6IDEsXHJcbiAgICAgICAgZHJpbmtEdG9zOiBbXHJcbiAgICAgICAgICAgIG5ldyBEcmlua0R0byh7IGlkOiBvcmRlci5kcmlua3NbMF0uaWQgfSksXHJcbiAgICAgICAgICAgIG5ldyBEcmlua0R0byh7IGlkOiBvcmRlci5kcmlua3NbMV0uaWQgfSlcclxuICAgICAgICBdXHJcbiAgICB9KVxyXG4pXHJcbmxvZy5pbmZvKCdSZXRyaWV2aW5nIG9yZGVyLi4uJylcclxub3JkZXIgPSBhcHAuZGlzcGF0Y2hRdWVyeShnZXRPcmRlcih7IHRhYmxlTnVtYmVyOiAxIH0pKVxyXG5sb2cuZGVidWcob3JkZXIpXHJcblxyXG5sb2cuaW5mbygnQ2xvc2UgdGFibGUnKVxyXG5hcHAuZGlzcGF0Y2hDb21tYW5kKGNsb3NlVGFibGUoe3RhYmxlTnVtYmVyOiAxfSkpXHJcblxyXG5sb2cuZGVidWcoJ1N0YXRlIGR1bXAnLCBhcHAuZGlzcGF0Y2hRdWVyeShnZXRTdGF0ZSkpIl19